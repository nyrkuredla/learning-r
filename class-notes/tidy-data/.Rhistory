source('~/Documents/training/r-learning/exercise3/data-acquisition-assignment01.R', echo=TRUE)
source('~/Documents/training/r-learning/exercise3/data-acquisition-assignment01.R', echo=TRUE)
? na
? drop_na
df <- tibble(x = c(1, 2, NA), y = c("a", NA, "b"))
df %>% drop_na()
glimpse(df)
drop_na(df) %>% glimpse()
? levels
source('~/Documents/training/r-learning/exercise3/data-acquisition-assignment01.R', echo=TRUE)
source('~/Documents/training/r-learning/exercise3/data-acquisition-assignment01.R', echo=TRUE)
? load
source('~/Documents/training/r-learning/exercise3/data-acquisition-assignment01.R', echo=TRUE)
source('~/Documents/training/r-learning/exercise3/data-acquisition-assignment01.R', echo=TRUE)
dir()
getwd()
setwd("Documents/training/learning-r/exercise3")
# assign to variable and print in one line
(str_print_ex <- "Assigning and printing using parentheses")
# multi-line:
(str_multi_line) <- "whoa, it's one line
and another
one more"
# multi-line:
(str_multi_line <- "whoa, it's one line
and another
one more")
# use cat() to display actual newline
cat(str_multi_line)
cat(str_chr_vector)
# storing multiple strings in one variable - "character vector
# can store literals, variables, and NA
str_chr_vector <- c("string 1", str_print_ex, NA, str_three)
# string literal
"abc"
# assigning it to a variable
str_three <- "abc"
# assign to variable and print in one line
(str_print_ex <- "Assigning and printing using parentheses")
# multi-line:
(str_multi_line <- "whoa, it's one line
and another
one more")
# use cat() to display actual newline
cat(str_multi_line)
# storing multiple strings in one variable - "character vector
# can store literals, variables, and NA
str_chr_vector <- c("string 1", str_print_ex, NA, str_three)
cat(str_chr_vector)
# str_length gives the length of a string, usually 1-to-1 per character but there are exceptions
str_length (str_three)
str_length (str_chr_vector)
# str_c - join multiple strings into a single string
? str_c()
# str_c - join multiple strings into a single string
? str_c()
str_combine_literals <- str_c("one", "two") %>% print()
str_combine_literals <- str_c("one", "two") %>% print()
# onetwo
str_length(str_combine_literals)
str_combine_literals <- str_c ("one", "two") %>% print ()
# onetwo
str_length (str_combine_literals)
# 6
str_chr_vector <- c ("five", "six", NA)
str_combine_mixed <- str_c (str_combine_literals, "three", str_chr_vector)
print (str_combine_mixed)
str_length (str_combine_mixed)
print(letters)
str_length(letters)
# recycling: replication of data in one vector to match the length of data in another
str_combine_letters <- str_c ("Letter: ", letters)
print (str_combine_letters)
str_length (str_combine_letters)
str_123 <- c ("1", "2", "3")
str_c (str_123, letters) %>% print()
## collapsing and separating strings - sep and collapse arguments on str_c
str_c (letters, collapse = "")
str_c (letters, collapse = ",")
str_c (letters, collapse = "," sep = ":")
## collapsing and separating strings - sep and collapse arguments on str_c
str_c (letters, collapse = "")
str_c (letters, collapse = ",")
str_c (letters, collapse = ",", sep = ":")
# str_sub: extract and replace substrings from a character vector
str_fox_dog <- "The crazy brown fox jumped over the lazy dog."
# first 9 characters, using positional arguments
str_fox_dog %>% str_sub (1, 9)
# str_sub: extract and replace substrings from a character vector
str_fox_dog <- "The crazy brown fox jumped over the lazy dog."
# first 9 characters, using positional arguments
str_fox_dog %>% str_sub (1, 9)
# last 9
str_fox_dog %>% str_sub (start = -9)
# str_sub: extract and replace substrings from a character vector
str_fox_dog <- "The crazy brown fox jumped over the lazy dog."
# first 9 characters, using positional arguments
str_fox_dog %>% str_sub (1, 9)
# last 9
str_fox_dog %>% str_sub (start = -9)
# just 'dog'
str_fox_dog %>% str_sub (start = -4, end = -1)
# str_sub: extract and replace substrings from a character vector
str_fox_dog <- "The crazy brown fox jumped over the lazy dog."
# first 9 characters, using positional arguments
str_fox_dog %>% str_sub (1, 9)
# last 9
str_fox_dog %>% str_sub (start = -9)
# just 'dog'
str_fox_dog %>% str_sub (start = -4, end = -2)
# note: piping doesn't work for this
str_sub (str_fox_dog, start = -4, end = -2) <- "cats"
print (str_fox_dog)
## str_detect - use regex to search strings
# Define strings
str_apple <- c(" apple pie", "apple", "Apple pie cake",
"banana apple pie", "blueberry pie", "apple apple", "apricot applesause cake")
# Return true false vector for strings containing 'apple'
# Assign to match_index
print("strings containing 'apple'")
match_index <- str_detect(str_apple, "apple")
# print match_index
print(match_index)
# Print strings associated with
# TRUE in match_index
# Hint: Use the index inside [] for the string variable
str_apple["apple"] %>%
print()
str_apple[match_index] %>%
print()
# print strings containing "pie"
print ("strings containing 'pie'")
match_index <- str_detect (str_apple, "pie")
str_apple[match_index] %>%
print()
match_index <- str_detect (str_apple, "pie")
str_apple[match_index] %>%
print()
# print strings ENDING in "-pie"
match_index <- str_detect (str_apple, "*pie")
str_apple[match_index] %>%
print()
# print strings ENDING in "-pie"
match_index <- str_detect (str_apple, "*pie$")
str_apple[match_index] %>%
print()
# print strings ENDING in "-pie"
match_index <- str_detect (str_apple, "[*pie$]")
str_apple[match_index] %>%
print()
# print strings ENDING in "-pie"
match_index <- str_detect (str_apple, [*pie$])
str_apple[match_index] %>%
print()
# print strings ENDING in "-pie"
match_index <- str_detect (str_apple, "*pie$")
str_apple[match_index] %>%
print()
# print strings ENDING in "-pie"
match_index <- str_detect (str_apple, "pie$")
str_apple[match_index] %>%
print()
# print strings STARTING with "apple"
match_index <- str_detect (str_apple, "^apple")
str_apple [match_index] %>%
print ()
# print strings starting with EITHER Apple OR apple
match_index <- str_detect (str_apple, "^[Aa]pple")
str_apple [match_index] %>%
print ()
? str_extract
source('~/Documents/training/r-learning/tidy-data/tidy-data.r', echo=TRUE)
source('~/Documents/training/r-learning/tidy-data/tidy-data.r', echo=TRUE)
dir()
setwd("Documents/training/r-learning/tidy-data")
dir()
df <- "weather.csv" %>% read_csv ()
source('~/Documents/training/r-learning/tidy-data/tidy-data.r', echo=TRUE)
source('~/Documents/training/r-learning/tidy-data/tidy-data.r', echo=TRUE)
source('~/Documents/training/r-learning/tidy-data/tidy-data.r', echo=TRUE)
source('~/Documents/training/r-learning/tidy-data/tidy-data.r', echo=TRUE)
? parse_number
source('~/Documents/training/r-learning/tidy-data/tidy-data.r', echo=TRUE)
source('~/Documents/training/r-learning/tidy-data/tidy-data.r', echo=TRUE)
source('~/Documents/training/r-learning/tidy-data/tidy-data.r', echo=TRUE)
# now year/month/day are all integers and all next to each other. let's combine into a single column
? make_date(
)
df4 <- df3 %>%
mutate (date = make_date (year, month, day)) %>% # new date column as combo of other columns
select (-year, -month, -day) %>% # removing original columns
select (id, date, everything()) # rearranging
df4 %>% glimpse ()
? spread
source('~/Documents/training/r-learning/tidy-data/tidy-data.r', echo=TRUE)
df6 <- df5 %>%
separate (id, col = c("city", "state"), sep = "_") %>%
select (state, city, everything())
df6 <- df5 %>%
separate (id, c("city", "state"), sep = "_") %>%
select (state, city, everything())
glimpse (df6)
df6 <- df5 %>%
separate (id, c("city", "state"), sep = "_") %>%
select (city, state, everything())
glimpse (df6)
df6 %>% ggplot (aes (x = date, y = tavg)) +
geom_jitter (alpha = 0.1) +
geom_smooth (method = lm, se = FALSE)
df6 %>% ggplot (aes (x = date, y = tavg)) +
geom_jitter (alpha = 0.1) +
geom_smooth (method = lm, se = FALSE) +
labs (title = "Average temperatures in Seattle, WA")
# let's plot the result!
df6 %>% ggplot (aes (x = date, y = tavg)) +
geom_point (alpha = 0.1) +
geom_smooth (method = lm, se = FALSE) +
labs (title = "Average temperatures in Seattle, WA")
# let's plot the result!
df6 %>% ggplot (aes (x = date, y = tavg)) +
geom_point () +
geom_smooth (method = lm, se = FALSE) +
labs (title = "Average temperatures in Seattle, WA")
df6 %>% ggplot (aes (x = date, y = tavg)) +
geom_point () +
geom_line () +
labs (title = "Average temperatures in Seattle, WA")
# let's plot the result!
df6 %>% ggplot (aes (x = date, y = tavg)) +
geom_point () +
geom_line () +
labs (title = "Average temperatures in Seattle, WA, Oct-Nov")
# now let's plot with all temp metrics as y axis
# using gather()
df6 %>%
gather (element, value, tmax:tmin) %>%
ggplot (aes (x = date, y = value, color = element)) +
geom_point() +
geom_line() +
labs (title = "Max, Min, and Average Temps in Seattle, WA, Oct-Nov")
