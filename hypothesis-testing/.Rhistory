source('~/Documents/training/r-learning/exercise3/data-acquisition-assignment01.R', echo=TRUE)
source('~/Documents/training/r-learning/exercise3/data-acquisition-assignment01.R', echo=TRUE)
? na
? drop_na
df <- tibble(x = c(1, 2, NA), y = c("a", NA, "b"))
df %>% drop_na()
glimpse(df)
drop_na(df) %>% glimpse()
? levels
source('~/Documents/training/r-learning/exercise3/data-acquisition-assignment01.R', echo=TRUE)
source('~/Documents/training/r-learning/exercise3/data-acquisition-assignment01.R', echo=TRUE)
? load
source('~/Documents/training/r-learning/exercise3/data-acquisition-assignment01.R', echo=TRUE)
source('~/Documents/training/r-learning/exercise3/data-acquisition-assignment01.R', echo=TRUE)
dir()
getwd()
setwd("Documents/training/learning-r/exercise3")
# assign to variable and print in one line
(str_print_ex <- "Assigning and printing using parentheses")
# multi-line:
(str_multi_line) <- "whoa, it's one line
and another
one more"
# multi-line:
(str_multi_line <- "whoa, it's one line
and another
one more")
# use cat() to display actual newline
cat(str_multi_line)
cat(str_chr_vector)
# storing multiple strings in one variable - "character vector
# can store literals, variables, and NA
str_chr_vector <- c("string 1", str_print_ex, NA, str_three)
# string literal
"abc"
# assigning it to a variable
str_three <- "abc"
# assign to variable and print in one line
(str_print_ex <- "Assigning and printing using parentheses")
# multi-line:
(str_multi_line <- "whoa, it's one line
and another
one more")
# use cat() to display actual newline
cat(str_multi_line)
# storing multiple strings in one variable - "character vector
# can store literals, variables, and NA
str_chr_vector <- c("string 1", str_print_ex, NA, str_three)
cat(str_chr_vector)
# str_length gives the length of a string, usually 1-to-1 per character but there are exceptions
str_length (str_three)
str_length (str_chr_vector)
# str_c - join multiple strings into a single string
? str_c()
# str_c - join multiple strings into a single string
? str_c()
str_combine_literals <- str_c("one", "two") %>% print()
str_combine_literals <- str_c("one", "two") %>% print()
# onetwo
str_length(str_combine_literals)
str_combine_literals <- str_c ("one", "two") %>% print ()
# onetwo
str_length (str_combine_literals)
# 6
str_chr_vector <- c ("five", "six", NA)
str_combine_mixed <- str_c (str_combine_literals, "three", str_chr_vector)
print (str_combine_mixed)
str_length (str_combine_mixed)
print(letters)
str_length(letters)
# recycling: replication of data in one vector to match the length of data in another
str_combine_letters <- str_c ("Letter: ", letters)
print (str_combine_letters)
str_length (str_combine_letters)
str_123 <- c ("1", "2", "3")
str_c (str_123, letters) %>% print()
## collapsing and separating strings - sep and collapse arguments on str_c
str_c (letters, collapse = "")
str_c (letters, collapse = ",")
str_c (letters, collapse = "," sep = ":")
## collapsing and separating strings - sep and collapse arguments on str_c
str_c (letters, collapse = "")
str_c (letters, collapse = ",")
str_c (letters, collapse = ",", sep = ":")
# str_sub: extract and replace substrings from a character vector
str_fox_dog <- "The crazy brown fox jumped over the lazy dog."
# first 9 characters, using positional arguments
str_fox_dog %>% str_sub (1, 9)
# str_sub: extract and replace substrings from a character vector
str_fox_dog <- "The crazy brown fox jumped over the lazy dog."
# first 9 characters, using positional arguments
str_fox_dog %>% str_sub (1, 9)
# last 9
str_fox_dog %>% str_sub (start = -9)
# str_sub: extract and replace substrings from a character vector
str_fox_dog <- "The crazy brown fox jumped over the lazy dog."
# first 9 characters, using positional arguments
str_fox_dog %>% str_sub (1, 9)
# last 9
str_fox_dog %>% str_sub (start = -9)
# just 'dog'
str_fox_dog %>% str_sub (start = -4, end = -1)
# str_sub: extract and replace substrings from a character vector
str_fox_dog <- "The crazy brown fox jumped over the lazy dog."
# first 9 characters, using positional arguments
str_fox_dog %>% str_sub (1, 9)
# last 9
str_fox_dog %>% str_sub (start = -9)
# just 'dog'
str_fox_dog %>% str_sub (start = -4, end = -2)
# note: piping doesn't work for this
str_sub (str_fox_dog, start = -4, end = -2) <- "cats"
print (str_fox_dog)
## str_detect - use regex to search strings
# Define strings
str_apple <- c(" apple pie", "apple", "Apple pie cake",
"banana apple pie", "blueberry pie", "apple apple", "apricot applesause cake")
# Return true false vector for strings containing 'apple'
# Assign to match_index
print("strings containing 'apple'")
match_index <- str_detect(str_apple, "apple")
# print match_index
print(match_index)
# Print strings associated with
# TRUE in match_index
# Hint: Use the index inside [] for the string variable
str_apple["apple"] %>%
print()
str_apple[match_index] %>%
print()
# print strings containing "pie"
print ("strings containing 'pie'")
match_index <- str_detect (str_apple, "pie")
str_apple[match_index] %>%
print()
match_index <- str_detect (str_apple, "pie")
str_apple[match_index] %>%
print()
# print strings ENDING in "-pie"
match_index <- str_detect (str_apple, "*pie")
str_apple[match_index] %>%
print()
# print strings ENDING in "-pie"
match_index <- str_detect (str_apple, "*pie$")
str_apple[match_index] %>%
print()
# print strings ENDING in "-pie"
match_index <- str_detect (str_apple, "[*pie$]")
str_apple[match_index] %>%
print()
# print strings ENDING in "-pie"
match_index <- str_detect (str_apple, [*pie$])
str_apple[match_index] %>%
print()
# print strings ENDING in "-pie"
match_index <- str_detect (str_apple, "*pie$")
str_apple[match_index] %>%
print()
# print strings ENDING in "-pie"
match_index <- str_detect (str_apple, "pie$")
str_apple[match_index] %>%
print()
# print strings STARTING with "apple"
match_index <- str_detect (str_apple, "^apple")
str_apple [match_index] %>%
print ()
# print strings starting with EITHER Apple OR apple
match_index <- str_detect (str_apple, "^[Aa]pple")
str_apple [match_index] %>%
print ()
? str_extract
dir()
setwd(Documents/training/r-learning)
setwd("Documents/training/r-learning/tidy-data")
getwd()
dir()
touch group-data.r
source('~/Documents/training/r-learning/tidy-data/grouping-data.r', echo=TRUE)
# help
library (help = "dplyr")
source('~/Documents/training/r-learning/tidy-data/grouping-data.r', echo=TRUE)
mpg %>%
group_by (class) %>%
summarize (n = n()) %>%
arrange (n %>% desc())
# but if all we want to do is get this kind of group count, there's a more convenient function: tally
? tally
mpg %>%
group_by(class) %>% # still have to designate what is being...tallied
tally (sort = TRUE) # default is false - true will show the largest groups at the top
# count is even easier cause it's a wrapper for tally that does the group by for you
? count
mpg %>%
count (class, sort = TRUE)
# sort hwy data to have min, max, and mean hwy miles per gallon by class
? avg
df <- mpg %>%
group_by (class) %>% # first group by class
summarize (hwy_max = hwy %>% max(),
hwy_avg = hwy %>% mean(),
hwy_min = hwy %>% min())
glimpse(df)
df
df <- "weather.csv" %>% read_csv ()
glimpse (df)
# display
df # columns d1-d10 represent the first ten days of the month
# given that the "grain" of this table is daily, there should be one row per day, but currently we have three rows per month. hm
# gather() - gathers columns into key-value pairs
? gather
# let's turn columns d1-d10 into two columns - day, and value per day
# columns can be selected using col1:coln
df2 <- df %>%
gather (day, value, d1:d10)
glimpse (df2)
df2 <- df %>%
gather (hwy_metric, hwy_value, hwy_max:hwy_min)
glimpse (df2)
df <- mpg %>%
group_by (class) %>% # first group by class
summarize (hwy_max = hwy %>% max(), # calculating, e.g., the max hwy mpg per class
hwy_avg = hwy %>% mean(),
hwy_min = hwy %>% min())
glimpse(df)
df
# one row per unique class - also note that max and min are int while avg is dbl
# let's get hwy_min, hwy_max, hwy_avg into key-value pair columns hwy_metric and hwy_value (gather)
df2 <- df %>%
gather (hwy_metric, hwy_value, hwy_max:hwy_min)
glimpse (df2)
df2
# remove the "hwy_" prefix from the hwy_metric column and store result in df3
df3 <- df2 %>%
mutate (hwy_metric = hwy_metric %>% str_replace ("hwy_", ""))
glimpse (df3)
# plotting the values using geom_col
df3 %>% ggplot (aes (x = hwy_metric, y = hwy_value)) +
geom_col()
# display levels and row count
df4$hwy_metric %>% fct_count()
df4 <- df3 %>%
mutate (hwy_metric = hwy_metric %>% as.factor())
# display levels and row count
df4$hwy_metric %>% fct_count()
df4 <- df3 %>%
mutate (hwy_metric = hwy_metric %>% as.factor())
# display levels and row count
df4$hwy_metric %>% fct_count() # 7 each, still avg - max - min
# let's reorder
df4 <- df4 %>%
mutate (=hwy_metric = hwy_metric %>% fct_relevel (c ("min", "avg", "max")))
glimpse (df4)
df4
# look again
df4 %>% ggplot (aes (x = hwy_metric, y = hwy_value)) +
geom_col()
df4 <- df3 %>%
mutate (hwy_metric = hwy_metric %>% as.factor())
# display levels and row count
df4$hwy_metric %>% fct_count() # 7 each, still avg - max - min
# let's reorder
df4 <- df4 %>%
mutate (hwy_metric = hwy_metric %>% fct_relevel (c ("min", "avg", "max")))
# look again
df4 %>% ggplot (aes (x = hwy_metric, y = hwy_value)) +
geom_col()
# fill by class
df4 %>% ggplot (aes (hwy_metric, hwy_value, fill = class)) +
geom_col (position = "dodge")
# now facet by class
df4 %>% ggplot (aes (hwy_metric, hwy_value, fill = class)) +
geom_col (position = "dodge") +
facet_grid ( ~ class)
# finally - boxplot to further explore deltas
mpg %>%
ggplot (aes (class, hwy, fill = class)) +
geom_boxplot()
# varwidth changes the width of each box in proportion to the number of rows of that class
mpg %>%
ggplot (aes (class, hwy, fill = class)) +
geom_boxplot (varwidth = TRUE)
# the classic
func_hello_world <- function {
print ("Hello, world!")
}
func_hello_world
# the classic
func_hello_world <- function () {
print ("Hello, world!")
}
func_hello_world
f_hello_world # this prints the definition of the function
f_hello_world() # Hello, world!
f_hello_world <- function () {
print ("Hello, world!")
}
f_hello_world # this prints the definition of the function
f_hello_world() # Hello, world!
# speaking of params
f_print_msg <- function (msg) {
print(msg)
}
f_print_msg("Hi, mom!")
help ("return") # use help since it's a keyword
f_adding <- function (x = 0, y = 0) { # setting default values
return (x + y)
}
f_adding (2, 3) #5
f_adding (6) # x = 6, y = 0, returns 6
f_adding (y = 7) # x = 0, y = 7, returns 7
# require and library load add-on packages
? require
? install.packages
? make_date
storms
? round
df <- mpg %>%
group_by (class) %>% # first group by class
summarize (hwy_max = hwy %>% max(), # calculating, e.g., the max hwy mpg per class
hwy_avg = hwy %>% mean(),
hwy_min = hwy %>% min())
glimpse(df)
df
# one row per unique class - also note that max and min are int while avg is dbl
# let's get hwy_min, hwy_max, hwy_avg into key-value pair columns hwy_metric and hwy_value (gather)
df2 <- df %>%
gather (hwy_metric, hwy_value, hwy_max:hwy_min)
glimpse (df2)
df2
source('~/Documents/training/r-learning/descriptive-statistics/central-tendency.r', echo=TRUE)
library (help = "modeest")
install.packages ("modeest")
library (help = "modeest")
source('~/Documents/training/r-learning/descriptive-statistics/central-tendency.r', echo=TRUE)
# working with the mean
? mean
mean (three_numbers)
mean (four_numbers)
mean (five_numbers) #
mean (na_numbers)
mean (outlier_numbers)
df$cyl %>% mean ()
df$displ %>% mean ()
df$hwy %>% mean ()
# how to handle NA values? there's an argument for that
na_numbers %>% mean (na.rm = TRUE)
outlier_numbers %>% mean (trim = 0.1) # 10% trim
outlier_numbers %>% mean (trim = 0.3) # 30% trim
median (na_numbers, na.rm = TRUE)
median (three_numbers)
median (four_numbers)
median (five_numbers)
median (na_numbers, na.rm = TRUE)
median (outlier_numbers)
median (df$cyl)
median (df$displ)
median (df$hwy)
outlier_numbers [5] <- 3^20
print (outlier_numbers)
outlier_numbers %>% median ()
# but mean on the other hand:
outlier_numbers %>% mean ()
# mode, aka mfv (most frequent value)
mfv (df$cyl)
source('~/Documents/training/r-learning/descriptive-statistics/central-tendency.r', echo=TRUE)
# mode, aka mfv (most frequent value)
mode (df$cyl)
# mode, aka mfv (most frequent value)
? mode
# mode, aka mlv (most frequent value)
? mlv
# mode, aka mlv (most frequent value)
help (package = "modeest")
# mode, aka mlv (most frequent value)
modeest::mlv(df$cyl)
mlv(df$cyl)
# mode, aka mlv (most frequent value)
mlv <- modeest::mlv()
mlv(df$cyl)
# mode, aka mlv (most frequent value)
mlv(x) <- modeest::mlv(x)
# mode, aka mlv (most frequent value)
mlv <- modeest::mlv
mlv(df$cyl)
mlv (four_numbers)
mlv (na_numbers, na.rm = TRUE)
# mode, aka mlv (most likely value)
mlv <- modeest::mlv(method = "shorth")
# quantile - sample quantiles corresponding to probability
# from 0 to 1
quantile (df$displ)
# summary - gives all these values in a handy block
df$displ %>% summary ()
# can also do the whole df
df %>% summary ()
# rank - sample ranks of values in a *vector* (so need to break out columns from a data frame)
df$hwy %>% rank () %>% head ()
df$cyl %>% rank () %>% head ()
library (tidyverse)
library (tidyverse)
df_ames_housing <- "./AmesHousing.csv" %>% read_csv()
df_ames_housing
set_wd(../hypothesis-testing)
setwd("../hypothesis-testing/")
getwd()
dir()
# loading the data
df_ames_housing <- "./AmesHousing.csv" %>% read_csv()
df_ames_housing
df_ames_housing <- "./AmesHousing.csv" %>% read_csv()
df_ames_housing %>% head (10)
# let's look at Old Town and Somerst neighborhoods and sales prices
df_ames_housing <- df_ames_housing %>%
mutate_if (is.character, as.factor) %>%
select (Neighborhood, SalePrice)
df_ames_housing %>% head (10)
# new df with just Somerst to explore that data
df_ames_somerst <- df_ames_housing %>%
filter (Neighborhood == "Somerst")
# ditto Old Town
df_ames_oldTown <- df_ames_housing %>%
filter (Neighborhood == "OldTown")
df_ames_oldTown %>% head (5)
df_ames_somerst %>% summary ()
df_ames_oldTown %>% summary ()
# check em out: mean and standard deviation
somerst_mean <- df_somerst$SalePrice %>% mean () %>% round(1)
somerst_sd <- df_somerst$SalePrice %>% sd () %>% round(1)
# print results
cat(str_c("Somerst: mean = ", somerst_mean, " and standard deviation = ", somerst_sd))
# same with old town
old_town_mean <- df_old_town$SalePrice %>% mean () %>% round(1)
old_town_sd <- df_old_town$SalePrice %>% sd () %>% round(1)
# print results
cat(str_c("OldTown: mean = ", old_town_mean, " and standard deviation = ", old_town_sd))
# ditto Old Town
df_ames_old_town <- df_ames_housing %>%
filter (Neighborhood == "OldTown")
# check em out: mean and standard deviation
somerst_mean <- df_somerst$SalePrice %>% mean () %>% round(1)
somerst_sd <- df_somerst$SalePrice %>% sd () %>% round(1)
# print results
cat(str_c("Somerst: mean = ", somerst_mean, " and standard deviation = ", somerst_sd))
# same with old town
old_town_mean <- df_old_town$SalePrice %>% mean () %>% round(1)
old_town_sd <- df_old_town$SalePrice %>% sd () %>% round(1)
# print results
cat(str_c("OldTown: mean = ", old_town_mean, " and standard deviation = ", old_town_sd))
# new df with just Somerst to explore that data
df_somerst <- df_ames_housing %>%
filter (Neighborhood == "Somerst")
# ditto Old Town
df_old_town <- df_ames_housing %>%
filter (Neighborhood == "OldTown")
# check em out: mean and standard deviation
somerst_mean <- df_somerst$SalePrice %>% mean () %>% round(1)
somerst_sd <- df_somerst$SalePrice %>% sd () %>% round(1)
# print results
cat(str_c("Somerst: mean = ", somerst_mean, " and standard deviation = ", somerst_sd))
# same with old town
old_town_mean <- df_old_town$SalePrice %>% mean () %>% round(1)
old_town_sd <- df_old_town$SalePrice %>% sd () %>% round(1)
# print results
cat(str_c("OldTown: mean = ", old_town_mean, " and standard deviation = ", old_town_sd))
# time to find out
cat ("\n***** Somerset vs Old Town ****")
t.test (df_somerst$SalePrice, df_old_town$SalePrice, conf.level = 0.95, alternative = "two.sided")
t.test ( df_somerst$SalePrice, df_old_town$SalePrice, conf.level = 0.95, alternative = "greater") # left is greater than right
# just for chuckles let's run it the other way
t.test ( df_somerst$SalePrice, df_old_town$SalePrice, conf.level = 0.95, alternative = "less")
# just for chuckles let's run it the other way
t.test ( df_old_town$SalePrice, df_somerst$SalePrice, conf.level = 0.95, alternative = "greater")
t.test ( df_somerst$SalePrice, df_old_town$SalePrice, conf.level = 0.95, alternative = "greater") # left is greater than right
